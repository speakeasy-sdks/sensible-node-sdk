openapi: 3.0.3
servers:
  - url: https://api.sensible.so/v0
    description: Production server (uses live data)
info:
  title: Extraction
  version: 0.0.0
  license: # TODO: fill in
    name: Sensible API
    url: https://www.TBD.org/licenses/LICENSE-2.0.html
  description: Extract structured data from documents with the Sensible API.

# Apply the auth globally to all operations
security:
  - bearerAuth: []

tags:
  - name: Document
    description: Extract data from a document
  - name: Portfolio
    description: Manage your portfolio of documents
  - name: PDF
    description: Manage your SenseML configuration
  - name: Results
    description: Retrieve an extraction

paths:
  /extract/{document_type}:
    post:
      operationId: extract-data
      summary: Extract data from a document

      description: |
        Extract data from a local document synchronously.

        To explore this endpoint, use this interactive API reference, or use one of the following options:

        - For a quick "hello world" response to this endpoint, see the [quickstart](doc:quickstart)
        - For a step-by-step tutorial about calling this endpoint, see [Try synchronous extraction](doc:api-tutorial-sync).
        - Run this endpoint in the Sensible Postman collection.
          [![Run in Postman](https://run.pstmn.io/button.svg)](https://god.gw.postman.com/run-collection/16839934-45339059-3fec-4c31-a891-9a12a3e1c22b?action=collection%2Ffork&collection-url=entityId%3D16839934-45339059-3fec-4c31-a891-9a12a3e1c22b%26entityType%3Dcollection%26workspaceId%3Ddbde09dc-b7dd-487d-a68f-20d32b008f90)

        There are two options for posting the document bytes.
          1. (often preferred) specify the non-encoded document bytes as the entire request body,and specify the content-type, for example,"application/pdf" or "image/jpeg".
             See the following for supported file formats.
          2. Base64 encode the document bytes, specify them in a body "document" field, and specify application/json for the content type.

        Using the Sensible app, you can extract from PDFs. Using the Sensible API, you can extract document data from the following file formats:

          - PDF
          - JPEG
          - PNG
          - TIFF

        When extracting from image file formats, Sensible ignore OCR or OCR preprocessor settings you configure in the document type or SenseML configuration.

        For TIFF documents, SenseML that attempts to return a rendered page returns an error, including:
          - pixel-based methods, such as Box, Checkbox, Signature, and image coordinates found with the Document Range methodf
          - Key/Value method
          - Fixed Table and Table methods with the Stop parameter specified. Use the Text Table method as an alternative.


      parameters:
        - $ref: '#/components/parameters/document_type'
        - $ref: '#/components/parameters/environment'
      requestBody:
        required: true

        content:
          image/jpeg:
            schema:
              type: string
              format: binary
          image/png:
            schema:
              type: string
              format: binary
          image/tiff:
            schema:
              type: string
              format: binary
              description: Sensible doesn't support using pixel-based methods, such as Box, Checkbox, Signature, and image coordinates, with TIFF-formatted documents.
          application/pdf:
            schema:
              type: string
              format: binary
              description: non-encoded document bytes as the entire request body
          application/json:
            schema:
              $ref: "#/components/schemas/encodedPdf"





      tags:
      - Document
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExtractionSingleResponse'
          description: |
            The structured data extracted from the document.
        '401':
          $ref: '#/components/responses/401'
        '400':
          $ref: '#/components/responses/400'
        '415':
          $ref: '#/components/responses/415'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
  /generate_upload_url/{document_type}:
    post:
      operationId: generate-upload-url
      summary: Extract doc at a Sensible URL
      description: >-
        Extract data asynchronously from a document with the following steps. You must use this or other asynchronous endpoints for documents that are over 4.5MB in size or require over 90 seconds to process.
          1. Use this endpoint to generate a Sensible URL.
          2. PUT the document you want to extract data from at the URL, where `SENSIBLE_UPLOAD_URL` is the URL you received
        from this endpoint's response.
        For example, `curl -T ./sample.pdf "SENSIBLE_UPLOAD_URL"`.
        Note: the pre-signed upload_url does not support Base64 encoded documents. You PUT the document bytes directly to the endpoint,
        and you must match the "Content-Type" header to that specified in the POST that creates the URL. If you omit the parameter, you
        must omit the header, and if you specify the parameter, you must include the exact header in the PUT.
          3.  To retrieve the extraction or poll its status, use the extraction `id` returned in the response to call the
        GET documents/{id} endpoint.

        For a step-by-step tutorial on calling this endpoint, see
        [Try asynchronous extraction from a Sensible URL](https://docs.sensible.so/docs/api-tutorial-async-2).

      parameters:
        - $ref: '#/components/parameters/document_type'
        - $ref: '#/components/parameters/environment'

      requestBody:
        content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenerateUrlRequest'
      tags:
      - Document
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UploadResponse'
          description: Returns the upload_url at which to PUT the document for extraction
        '401':
          $ref: '#/components/responses/401'
        '400':
          $ref: '#/components/responses/400'
        '415':
          $ref: '#/components/responses/415'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'


  /extract_from_url/{document_type}:
    post:
      operationId: provide-download-url
      summary: Extract doc at your URL
      description: >-
        Extract data asynchronously from a document at the specified `document_url`.<br/>
        You must use this or other asynchronous endpoints for documents that are over 4.5MB in size or require over 30 seconds to process.
        Take the following steps.
        1. Run this endpoint.
        2. To retrieve the extraction or poll its status, use the extraction `id` returned in the response to call the GET documents/{id} endpoint.
        For a step-by-step tutorial on calling this endpoint,
        see [Try asynchronous extraction from your URL](doc:api-tutorial-async-1).
      parameters:
        - $ref: '#/components/parameters/document_type'
        - $ref: '#/components/parameters/environment'
      requestBody:
        content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExtractFromUrlRequest'
      tags:
      - Document
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExtractFromUrlResponse'
          description: Returns the ID to use to retrieve the extraction
        '401':
          $ref: '#/components/responses/401'
        '400':
          $ref: '#/components/responses/400'
        '415':
          $ref: '#/components/responses/415'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'

  /generate_upload_url:
    post:
      operationId: generate-sensible-portfolio-url
      summary: Extract portfolio at a Sensible URL
      description:  >-
        Use this endpoint with multiple documents that are packaged into one PDF file (a PDF "portfolio").
        Segments a PDF at the specified `document_url` into the specified document types (for example, 1099, w2, and bank_statement)
        and then runs extractions asynchronously for each document Sensible finds in the PDF portfolio. Take the following steps.
        1. Run this endpoint.
        2. To retrieve the extraction results or poll status, use the extraction `id` returned in the response to call
        the GET documents/{id} endpoint.
        For more about extracting from PDF portfolios, see [Extracting from document portfolios](doc:portfolio).
      parameters:
        - $ref: '#/components/parameters/environment'


      requestBody:
        content:
            application/json:
              schema:
                type: object
                properties:
                  webhook:
                    $ref: '#/components/schemas/Webhook'
                  types:
                    $ref: '#/components/schemas/DocumentTypeNames'
                required:
                  - types
      tags:
      - Portfolio
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UploadPortfolioResponse'
          description: Returns the upload_url at which to PUT the document for extraction
        '401':
          $ref: '#/components/responses/401'
        '400':
          $ref: '#/components/responses/400'
        '415':
          $ref: '#/components/responses/415'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'

  /extract_from_url:
    post:
      operationId: generate-your-portfolio-url
      summary: Extract portfolio at your URL
      description:  >-
        Use this endpoint with multiple documents that are packaged into one PDF file (a PDF "portfolio").
        Segments a PDF into the specified document types (for example, 1099, w2, and bank_statement) and then runs extractions
        asynchronously for each document Sensible finds in the PDF portfolio.  Take the following steps -
        1. Use this endpoint to generate a Sensible URL.
        2. PUT the PDF you want to extract data from at the URL, where `SENSIBLE_UPLOAD_URL` is the URL you received
        from this endpoint's response. For example, `curl -T ./sample.pdf "SENSIBLE_UPLOAD_URL"`
        Note - the pre-signed upload_url does not support Base64 encoded PDFs.
        You PUT the PDF bytes directly to the endpoint and must omit the content-type header.
        3. To retrieve the extraction or poll its status, use the extraction `id` returned in
        the response to call the GET documents/{id} endpoint.
        For more about extracting from PDF portfolios, see [Extracting from document portfolios](doc:portfolio).
      parameters:
        - $ref: '#/components/parameters/environment'
      requestBody:
        content:
            application/json:
              schema:
                type: object
                properties:
                  document_url:
                    $ref: '#/components/schemas/DocumentUrl'
                  types:
                    $ref: '#/components/schemas/DocumentTypeNames'
                  webhook:
                    $ref: '#/components/schemas/Webhook'
                required:
                  - types
                  - document_url
      tags:
      - Portfolio
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExtractFromUrlPortfolioResponse'
          description: Returns the ID to use to retrieve the extraction.
        '401':
          $ref: '#/components/responses/401'
        '400':
          $ref: '#/components/responses/400'
        '415':
          $ref: '#/components/responses/415'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'

  /documents/{id}:
    get:
      operationId: retrieve
      summary: Retrieve extraction
      description: >-
        Use this endpoint in conjunction with asynchronous extraction requests to retrieve your results.
        You can also use this endpoint to retrieve the results for documents extractions from the synchronous /extract endpoint.
        To poll extraction status, check the `status` field in this endpoint's response.
        When the extraction completes, the returned status is `COMPLETE` and the response includes results in the
        `parsed_document` field.  For fields in the extraction for which Sensible couldn't find a value, Sensible returns null.
      parameters:
        - $ref: '#/components/parameters/id'
      tags:
      - Results
      responses:
        '200':
          content:
            application/json:
              schema:
                oneOf:
                 - $ref: '#/components/schemas/ExtractionSingleRetrievalResponse'
                 - $ref: '#/components/schemas/ExtractionPortfolioRetrievalResponse'
          description: Returns the extraction.
        '401':
          $ref: '#/components/responses/401'
        '400':
          $ref: '#/components/responses/400'
        '415':
          $ref: '#/components/responses/415'
        '500':
          $ref: '#/components/responses/500'

  /generate_excel/{ids}:
    get:
      operationId: get-excel-extraction
      summary: Get Excel extraction
      description: >-
        You can use this endpoint to get Excel files from PDF documents. In more detail, this endpoint converts your JSON document extraction to an Excel spreadsheet.
        To compile multiple PDF documents into one Excel file, specify the IDs of their recent extractions in the request separated by commas, for example,
        `/generate_excel/867514cc-fce7-40eb-8e9d-e6ec48cdac34,5093c65f-05bd-46a3-8df7-da3ed00f6d35`.
        For the best compiled spreadsheet results, configure your SenseML so that the PDFs output identically named fields.
        For more information about the conversion process, see [SenseML to spreadsheet reference](doc:excel-reference).
        This endpoint also works with JPEG, TIFF, and PNG documents.
        Call this endpoint after an extraction completes. For more information about checking extraction status,
        see the `GET /documents/{id}` endpoint.
      parameters:
        - $ref: '#/components/parameters/ids'
      tags:
      - PDF
      responses:
        '200':
          description: |
            Indicates the extraction successfully converted to an Excel file. This response contains the download URL for the Excel file. The link
            expires after 15 minutes.
          content:
            application/json:
              schema:
                properties:
                  url:
                    type: string
                    format: url
                    description: The download URL for the Excel file
                    example: https://sensible-so-document-type-bucket-dev-us-west-2.s3.us-west-2.amazonaws.com/sensible/fc3484c5-3f35-4129-bb29-0ad1291ee9f8/EXTRACTION/14d82783-c12b-4e70-b0ae-ca1ce35a9836.xlsx?REDACTED

        '401':
          $ref: '#/components/responses/401'
        '400':
          $ref: '#/components/responses/400'
        '415':
          $ref: '#/components/responses/415'
        '500':
          $ref: '#/components/responses/500'


  /generate_csv/{ids}:
    get:
      operationId: get-csv-extraction
      summary: Get CSV extraction
      description: >-
        You can use this endpoint to get CSV files from PDF documents. In more detail, this endpoint converts your JSON document extraction to a comma-separated values.
        To compile multiple PDF documents into one CSV file, specify the IDs of their recent extractions in the request separated by commas, for example,
        `/generate_csv/867514cc-fce7-40eb-8e9d-e6ec48cdac34,5093c65f-05bd-46a3-8df7-da3ed00f6d35`.
        For the best compiled spreadsheet results, configure your SenseML so that the PDFs output identically named fields.
        For more information about the conversion process, see [SenseML to spreadsheet reference](doc:excel-reference).
        This endpoint also works with JPEG, TIFF, and PNG documents.
        Call this endpoint after an extraction completes. For more information about checking extraction status,
        see the `GET /documents/{id}` endpoint.
      parameters:
        - $ref: '#/components/parameters/ids'
      tags:
      - PDF
      responses:
        '200':
          description: |
            Indicates the extraction successfully converted to an CSV file. This response contains the download URL for the CSV file. The link
            expires after 15 minutes.
          content:
            application/json:
              schema:
                properties:
                  url:
                    type: string
                    format: url
                    description: The download URL for the CSV file
                    example: https://sensible-so-document-type-bucket-dev-us-west-2.s3.us-west-2.amazonaws.com/sensible/fc3484c5-3f35-4129-bb29-0ad1291ee9f8/EXTRACTION/14d82783-c12b-4e70-b0ae-ca1ce35a9836.csv?REDACTED

        '401':
          $ref: '#/components/responses/401'
        '400':
          $ref: '#/components/responses/400'
        '415':
          $ref: '#/components/responses/415'
        '500':
          $ref: '#/components/responses/500'



components:

  responses:

    401:
      description: Not authorized
      content:
        text/plain:
          schema:
            title: Unauthorized
            type: string
            example: Unauthorized
    400:
      description: Bad Request
      content:
        text/plain:
          schema:
            title: Bad Request
            type: string
            example: >-
              Either a specific set of messages about fields in the request, or error messages like the following examples -
              Not available to logged in users
              To use the asynchronous flow you must have persistence enabled
              Specified document type does not exist
              Specified document type ${named type} does not exist
              No published configurations found for environment ${environment}
              Specified golden does not exist
              Specified configuration/version does not exist
              Specified configuration/version is not valid
              Must provide the Content-Type header when request body is present
              Content-Type must be application/json
              Missing request body or body.document
              Could not determine the content type of the document
              Could not determine the content type of the document. Please check that the document was correctly encoded as Base64
              This PDF is invalid. If you submitted this PDF using Base64 encoding, please check that the encoding is correct
              This PDF is password protected. Please resubmit with password protection disabled
              This PDF is empty
              This PDF exceeds the maximum dimensions for OCR of 17 x 17 inches
              This PDF exceeds the maximum size for OCR of 50MB
              No fingerprints match for this PDF and fingerprint_mode is set to strict
              Content type of ${found} does not match declared type of ${expected}
              Document is not present

    415:
      description: Unsupported Media Type
      content:
        text/plain:
          schema:
            title: Unsupported Media Type
            type: string
            example: >-
              One of the following error messages -
              Content-Type must be application/json
              Content-Type must be application/json or application/pdf or image/jpeg or image/png or image/tiff
    429:
      description: Too Many Requests
      content:
        text/plain:
          schema:
            title: Unsupported Media Type
            type: string
            example: >-
              One of the following error messages -
              Attempt limit exceeded, please retry after some time.
              Free accounts are limited to 150 API calls per month. Please upgrade your account to make additional calls.
              Pro accounts are limited to 5,000 API calls per month. Please upgrade your account to make additional calls.
    500:
      description: Internal Server Error
      content:
        text/plain:
          schema:
            title: Sensible encountered an unknown error
            type: string
            example: Sensible encountered an unknown error
  parameters:
    id:
      name: id
      required: true
      in: path
      description: Unique ID for the extraction, used to retrieve the extraction.
      schema:
        $ref: '#/components/schemas/ExtractionId'
    ids:
      name: ids
      required: true
      in: path
      description: Comma-delimited list of unique extraction IDs.
      schema:
        $ref: '#/components/schemas/ExtractionId'



    document_type:
      name: document_type
      required: true
      in: path
      description: |
        Type of document to extract from. Create your custom type in the Sensible app (for example, `rate_confirmation`, `certificate_of_insurance`, or `home_inspection_report`).
        To quickly test this endpoint using the `Try It` button in this interactive explorer, use the `senseml_basics` tutorial document type with this [example document](https://github.com/sensible-hq/sensible-docs/raw/main/readme-sync/assets/v0/pdfs/1_extract_your_first_data.pdf).
        As a convenience, Sensible automatically detects the best-fit extraction from among the extraction queries ("configs") in the document type.
        For example, if you create an `auto_insurance_quotes` type, you can add `carrier 1`, `carrier 2`, and `carrier 3` configs
        to the type in the Sensible app so that you can extract data from all these carriers using the same `document_type`, without specifying the carrier in the API request.
      schema:
        type: string
      example: senseml_basics

    environment:
      name: environment
      in: query
      description: >-
        If you specify `development`, extracts preferentially using config versions
        published to the development environment in the Sensible app. The extraction runs all configs in the doc type before
        picking the best fit. For each config, falls back to production version if no development version of the config exists.
      schema:
        type: string
        enum: [production, development]
        default: production




  securitySchemes:
    bearerAuth:       # arbitrary name for the security scheme
      type: http
      scheme: bearer
      description: >-
        Sensible uses API keys to authenticate requests. You should have received a key as a part of onboarding,
        but if you're having trouble with your current key, please reach out to support@sensible.so.
        Keep your API keys secure and do not share them publicly accessible areas such as GitHub, client-side code, etc.
        Authentication to the API is performed via Bearer Authentication. Provide your API key as the bearer auth value.

  schemas:

    ExtractionSingleResponse: #single doc extraction
      allOf:
        - $ref: '#/components/schemas/ExtractionSingleBase'
        - $ref: '#/components/schemas/ExtractionContent'
        - type: object
          properties:
            completed:
              $ref: '#/components/schemas/ExtractionCompleted'
            classification_summary:
              $ref: '#/components/schemas/ClassificationSummary'
            environment:
              $ref: '#/components/schemas/EnvironmentName'

    ExtractionSingleRetrievalResponse: # through /documents/{id} endpoint
      allOf:
        - $ref: '#/components/schemas/ExtractionSingleResponse'
        - type: object
          properties:
            download_url:
              $ref: '#/components/schemas/DownloadUrlDocument'

    ExtractionPortfolioRetrievalResponse:
      allOf:
        - $ref: '#/components/schemas/PortfolioBase'
        - type: object
          properties:
            completed:
              $ref: '#/components/schemas/ExtractionCompleted'
            page_count:
              type: integer
              example: 100
              description: Total number of pages in the portfolio.
            download_url:
              $ref: '#/components/schemas/DownloadUrlDocument'
            documents:
              type: array
              items:
                $ref: '#/components/schemas/DocumentInPortfolio'


    ExtractFromUrlResponse:
      allOf:
        - $ref: '#/components/schemas/ExtractionSingleBase'
        - type: object
          properties:
            environment:
              $ref: '#/components/schemas/EnvironmentName'
            errors:
              $ref: '#/components/schemas/Errors'



    UploadResponse:
      allOf:
        - $ref: '#/components/schemas/ExtractionSingleBase'
        - type: object
          properties:
            upload_url:
              type: string
              format: url
              description: URL at which to PUT the PDF bytes array for extraction. for example, curl -T ./sample.pdf "YOUR_UPLOAD_URL"
              example: https://sensible-so-utility-bucket-prod-us-west-2.s3.us-west-2.amazonaws.com/EXTRACTION_UPLOAD/sensible/fc3484c5-3f35-4129-bb29-0ad1291ee9f8/EXTRACTION/14d82783-c12b-4e70-b0ae-ca1ce35a9836.pdf?AWSAccessKeyId=REDACTED&Expires=1623861476&Signature=REDACTED&x-amz-security-token=REDACTED


    ExtractFromUrlPortfolioResponse:
      allOf:
        - $ref: '#/components/schemas/PortfolioBase'
        - type: object
          properties:
            types:
              $ref: '#/components/schemas/DocumentTypeNames'


    UploadPortfolioResponse:
      allOf:
        - $ref: '#/components/schemas/PortfolioBase'
        - type: object
          properties:
            upload_url:
              type: string
              format: url
              description: URL at which to PUT the PDF bytes array for extraction. for example, curl -T ./sample.pdf "YOUR_UPLOAD_URL"
              example: https://sensible-so-utility-bucket-prod-us-west-2.s3.us-west-2.amazonaws.com/EXTRACTION_UPLOAD/sensible/fc3484c5-3f35-4129-bb29-0ad1291ee9f8/EXTRACTION/14d82783-c12b-4e70-b0ae-ca1ce35a9836.pdf?AWSAccessKeyId=REDACTED&Expires=1623861476&Signature=REDACTED&x-amz-security-token=REDACTED


    ExtractionSingleBase:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/ExtractionId'
        created:
          $ref: '#/components/schemas/ExtractionCreated'
        type:
         $ref: '#/components/schemas/DocumentTypeName'
        status:
         $ref: '#/components/schemas/ExtractionStatus'

    ExtractionContent: #         created:
          #$ref: '#/components/schemas/ExtractionCreated'
      type: object
      properties:
        configuration:
          $ref: '#/components/schemas/ConfigurationName'
        parsed_document:
          $ref: '#/components/schemas/ParsedDocument'
        validations:
          $ref: '#/components/schemas/Validations'
        file_metadata:
          $ref: '#/components/schemas/FileMetadata'
        validation_summary:
          $ref: '#/components/schemas/ValidationsSummary'
        errors:
           $ref: '#/components/schemas/Errors'


    PortfolioBase:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/ExtractionId'
        created:
          $ref: '#/components/schemas/ExtractionCreated'
        status:
         $ref: '#/components/schemas/ExtractionStatus'




    ExtractionContentPortfolio: # portfolio extraction
      allOf:
        - $ref: '#/components/schemas/ExtractionContent'
        - type: object
          properties:
            classification_summary:
              $ref: '#/components/schemas/ClassificationSummaryPortfolio'

    DocumentInPortfolio:
      type: object
      properties:
        documentType:
          $ref: '#/components/schemas/DocumentTypeName'
        configuration:
          $ref: '#/components/schemas/ConfigurationName'
        startPage:
          type: integer
          description: Page in the portfolio on which the document for this extraction starts.
          example: 2
        endPage:
          type: integer
          description: Page in the portfolio on which this document for this extraction ends.
          example: 6
        output:
          $ref: '#/components/schemas/ExtractionContentPortfolio'


    GenerateUrlRequest:
      type: object
      properties:
        webhook:
          $ref: '#/components/schemas/Webhook'
        content_type:
          $ref: '#/components/schemas/ContentType'

    ExtractFromUrlRequest:
      type: object
      properties:
        webhook:
          $ref: '#/components/schemas/Webhook'
        document_url:
          $ref: '#/components/schemas/DocumentUrl'
        content_type:
          $ref: '#/components/schemas/ContentType'
      required:
        - document_url







    EnvironmentName:
      description: Name of the environment to which the configuration used by this extraction was published.
      example: development
      type: string

    DocumentTypeName:
      description: Unique user-friendly name for a document type
      example: auto_insurance_quotes_all_carriers
      type: string

    Classification:
      type: object
      properties:
        configuration:
          $ref: '#/components/schemas/ConfigurationName'
        fingerprints_present:
          type: integer
          example: 1
          description: The number of this config's fingerprints that Sensible found in the document.
        fingerprints:
          type: integer
          example: 1
          description: The number of fingerprints defined in this config.
        score:
          $ref: '#/components/schemas/Score'


    ConfigurationName:
      type: string
      description: >-
        Name of the "configuration",  a collection of SenseML queries for extracting document data.
      example: config_for_x_company

    ClassificationSummary:
      type: array
      description:  >-
            Metadata about how Sensible chose the config to use for this extraction.
            Sensible compares all configs in the document type, then chooses the best extraction using
            fingerprints, scores, or a combination of the two.
            When two extractions tie by score and fingerprints, Sensible chooses the
            first configuration in alphabetic order.
            For more details, see [fingerprints](https://docs.sensible.so/docs/fingerprint#notes)
      items:
        $ref: '#/components/schemas/Classification'
      example:
        - configuration: config_for_x_company
          fingerprints: 2
          fingerprints_present: 2
          score:
            value: 3
            fields_present: 4
            penalities: 0.5
        - configuration: acme_co
          fingerprints: 2
          fingerprints_present: 2
          score:
            value: 0
            fields_present: 2
            penalities: 1.5

    ClassificationSummaryPortfolio:
      type: array
      description:  >-
            Metadata about how Sensible chose the config to use for this extraction.
            The summary doesn't return fingerprints information for portfolio extractions.
      items:
        $ref: '#/components/schemas/ClassificationPortfolio'
      example:
        - configuration: config_for_x_company
          score:
            value: 3
            fields_present: 4
            penalities: 0.5
        - configuration: acme_co
          score:
            value: 0
            fields_present: 2
            penalities: 1.5

    ClassificationPortfolio:
      type: object
      properties:
        configuration:
          $ref: '#/components/schemas/ConfigurationName'
        score:
          $ref: '#/components/schemas/Score'


    FileMetadata:
      type: object
      description:  >-
        Metadata about the PDF file, for example author, authoring tool, and modified date.
      properties:
        metadata:
          type: object
          description: Raw metadata embedded in the PDF. Returned if available, without data normalization.
        error:
          type: string
          description: Errors Sensible encountered when attempting to retrieve metadata
          example: "Error retrieving PDF metadata: Invalid PDF structure"
        info:
          type: object
          description: Normalized metadata about the PDF, returned if available.
          properties:
            author:
              type: string
              description: The name of the person who created the document.
              example: Jay S. Schiller
            title:
              type: string
              description: Filename of the PDF.
              example: file123.pdf
            creator:
              type: string
              description: If the document was converted to PDF from another format, the name of the application that created the original document from which it was converted.
              example:  macOS Version 11.2 (Build 20D64) Quartz PDFContext
            producer:
              type: string
              description: If the document was converted to PDF from another format, the name of the application that converted it to PDF
              example: Preview
            creation_date:
              type: string
              description: File creation date
              example: 2022-08-02T18:09:31.000+00:00
            modification_date:
              type: string
              description: File modification date
              example: 2022-08-03T15:09:23.000+00:00
            error:
              type: string
              description: Errors Sensible encountered when attempting to retrieve metadata.

    Score:
      type: object
      description: The score for the extraction, used to help choose the best extraction.
      properties:
        value:
          type: number
          example: 17
          description: The score total is fields_present minus penalty points. In the absence of fingerprints, Sensible returns the extraction in the document type with the highest score.
        fields_present:
          type: integer
          example: 17
          description: Number of non-null fields Sensible extracted from the document using this config
        penalties:
          type: number
          example: 1.5
          description: Errors are 1 penality point and warnings are 0.5 points. See the validation_summary for a breakdown.

    ParsedDocument:
      description: |
        Data extracted from the document, structured as an array of fields.
        Configure the verbosity parameter in the SenseML configuration to return
        extraction metadata, such as:
        - page numbers
        - the bounding polygons that
        define line coordinates
        - for text that Sensible OCR'd, confidence scores.
        For more information, see [Verbosity](doc:verbosity).
      type: object
      example:
        policy_number:
          type: number
          value: 123456789
          lines:
          - text: '123456789'
            page: 0
            boundingPolygon:
            - x: 6.458
              y: 2.601
            - x: 7.354
              y: 2.601
            - x: 7.354
              y: 2.767
            - x: 6.458
              y: 2.767
        name_insured:
          type: string
          value: Petar Petrov
          lines:
          - text: Petar Petrov
            page: 0
            boundingPolygon:
            - x: 1
              y: 5.515
            - x: 1.935
              y: 5.515
            - x: 1.935
              y: 5.674
            - x: 1
              y: 5.674

    Validation:
      type: object
      properties:
        description:
          type: string
          description: Description of the validation
          example: Dollar amount should be more than $100
        severity:
          type: string
          enum: [error, warning, skipped]
          example: warning
          description: Severity of the failing validation (error, warning, skipped)
        message:
          type: string
          description: Messages about why the validation failed
          example: >-
            Missing prerequisites: broker.email

    Validations:
      description: Which extracted fields failed validation rules you write in the Sensible app
      type: array
      items:
        $ref: '#/components/schemas/Validation'
      example:
        - description: Policy number must be 11 digits
          severity: error
        - description: Company email must be in format string@string
          severity: skipped
          message: Missing prerequisites - company_email

    ValidationsSummary:
      type: object
      description: Summary of the extracted fields that failed validation rules you write in the Sensible app.
      properties:
        fields:
          type: integer
          description: Number of fields specified in the SenseML config to extract from the document
          example: 6
        fields_present:
          type: integer
          description: Actual number of non-null fields extracted from the document
          example: 4
        errors:
          type: number
          description: Number of validation errors in the extraction
          example: 0
        warnings:
          type: number
          description: Number of validation warnings in the extraction
          example: 1
        skipped:
          type: integer
          description: Number of fields skipped in the extraction because a prerequisite field was null
          example: 1
    Errors:
      #todo flesh out errors more?
      type: array
      items:
        type: string
        example: >-
          Error retrieving PDF metadata: Invalid PDF structure
      description: Extraction error messages.



    DownloadUrlDocument:
      type: string
      description: URL of the document
      example: https://sensible-so-document-type-bucket-dev-us-west-2.s3.us-west-2.amazonaws.com/sensible/fc3484c5-3f35-4129-bb29-0ad1291ee9f8/EXTRACTION/246a6f60-0e5b-11eb-b720-295a6fba723e.pdf?AWSAccessKeyId=REDACTED


    ExtractionId:
      type: string
      format: uuid
      description: Unique ID for the extraction, used to retrieve the extraction
      example: 246a6f60-0e5b-11eb-b720-295a6fba723e

    ExtractionCreated:
      type: string
      format: date-time
      example: 2022-10-31T16:27:53.433
      description: Date and time Sensible created the extraction

    ExtractionCompleted:
      type: string
      format: date-time
      example: 2022-10-31T16:27:53.741Z
      description: Date and time Sensible set the extraction's status to COMPLETED

    ExtractionStatus:
      type: string
      description: Extraction status (WAITING, COMPLETE, FAILED)
      enum: [WAITING, COMPLETE, FAILED]
      example: COMPLETE
    DocumentTypeNames:
      type: array
      description: Specifies the document types contained in the PDF portfolio.
      items:
        type: string
        example: [tax_returns, bank_statements, credit_reports]
    Webhook:
      type: object
      description: >-
        Specifies to return extraction results to the defined webhook as soon as they're complete,
        so you don't have to poll for results status. Sensible also calls this webhook on error.
      properties:
        url:
          type: string
          format: url
          description: Webhook destination. Sensible will POST to this URL when the extraction is complete.
          example: https://example.com/example_webhook_url
        payload:
          type: string
          description: Information additional to the API response, for example a UUID for verification.
          example: info extra to the default extraction payload
    DocumentUrl:
      type: string
      format: url
      description:  >-
        URL that responds to a GET request with the bytes of the document to be extracted.
        This URL must be either publicly accessible, or presigned with a security token as part of the URL path.
        To check if the URL meets these criteria, open the URL with a web browser.
        The browser must either render the document as a full-page view with no other data, or download the document, without prompting for authentication.
      example: https://github.com/sensible-hq/sensible-docs/raw/main/readme-sync/assets/v0/pdfs/auto_insurance_anyco.pdf
    ContentType:
      type: string
      enum: ["application/pdf", "image/jpeg", "image/png", "image/tiff"]
      description: >-
        Content type of the document being presented for extraction. This field is optional, but if supplied must be presented consistently
        in all interactions.


    encodedPdf:
      type: object
      required:
        - document
      properties:
        document:
          type: string
          description: |
            This parameter shows option \#2 for posting PDF bytes. To populate it, you can encode a document, like this [example](https://github.com/sensible-hq/sensible-docs/raw/main/readme-sync/assets/v0/pdfs/1_extract_your_first_data.pdf) using a free online PDF-to-base64 encoder and paste the resulting bytes into this parameter, or you can right-click this parameter field and select **Use Example Value**.
